{"name":"libsixel","tagline":"A lightweight, fast implementation of DEC SIXEL graphics codec","body":"libsixel\r\n========\r\n\r\n[![Build Status](https://travis-ci.org/saitoha/libsixel.svg?branch=master)](https://travis-ci.org/saitoha/libsixel)\r\n[![Coverage Status](https://coveralls.io/repos/saitoha/libsixel/badge.png?branch=master)](https://coveralls.io/r/saitoha/libsixel?branch=master)\r\n\r\n## What is this?\r\n\r\nThis package provides encoder/decoder implementation for DEC SIXEL graphics, and\r\nsome converter programs.\r\n\r\n![img2sixel](https://raw.githubusercontent.com/saitoha/libsixel/data/data/libsixel-1.png)\r\n\r\nSIXEL is one of image formats for printer and terminal imaging introduced by\r\nDigital Equipment Corp. (DEC).\r\nIts data scheme is represented as a terminal-friendly escape sequence.\r\nSo if you want to view a SIXEL image file, all you have to do is \"cat\" it to your terminal.\r\n\r\n## SIXEL Animation\r\n\r\nimg2sixel(1) can decode GIF animation.\r\n\r\n  ![Animation](https://raw.githubusercontent.com/saitoha/libsixel/data/data/sixel.gif)\r\n\r\n\r\n## Related projects\r\n\r\n### Video streaming\r\n\r\nNow Youtube video streaming is available over SIXEL protocol by [FFmpeg-SIXEL](https://github.com/saitoha/FFmpeg-SIXEL) project.\r\n\r\n  [![FFmpeg-SIXEL](https://raw.githubusercontent.com/saitoha/libsixel/data/data/ffmpeg.png)](http://youtu.be/hqMh47lYHlc)\r\n\r\n\r\n### SDL integration: Gaming, Virtualization, ...etc.\r\n\r\n[SDL1.2-SIXEL](https://github.com/saitoha/SDL1.2-SIXEL) project makes enable you to operate various GUI applications on the terminal.\r\n\r\nYou can play \"The Battle for Wesnoth\" over SIXEL protocol.\r\n\r\n  [![SDL1.2-SIXEL WESNOTH](https://raw.githubusercontent.com/saitoha/libsixel/data/data/wesnoth.png)](http://youtu.be/aMUkN7TSct4)\r\n\r\nYou can run QEMU on SIXEL terminals.\r\n\r\n  [![SDL1.2-SIXEL QEMU](https://raw.githubusercontent.com/saitoha/libsixel/data/data/qemu.png)](http://youtu.be/X6M5tgNjEuQ)\r\n\r\n[SDL1.2-SIXEL](https://github.com/saitoha/SDL1.2-SIXEL) can collaborate with [XSDL-SIXEL](https://github.com/saitoha/xserver-xsdl-sixel).\r\n\r\n  [![SDL1.2-SIXEL XSDL](https://raw.githubusercontent.com/saitoha/libsixel/data/data/xsdl.png)](http://youtu.be/UOTMGdUPYRo)\r\n\r\n\r\n### X11 on SIXEL terminals\r\n\r\n[XSIXEL](https://github.com/saitoha/xserver-sixel) is a kdrive server implementation for SIXEL terminals.\r\n\r\n  ![XSIXEL](https://raw.githubusercontent.com/saitoha/libsixel/data/data/xsixel.png)\r\n\r\n\r\n### W3M integration\r\n\r\nimg2sixel(1) can be integrated with [Arakiken's w3m fork(remoteimg branch)](https://bitbucket.org/arakiken/w3m/branch/remoteimg).\r\n\r\n  ![w3m-sixel](https://raw.githubusercontent.com/saitoha/libsixel/data/data/w3m-sixel.png)\r\n\r\n\r\n@uobikiemukot's [sdump](https://github.com/uobikiemukot/sdump) project selected another approach.\r\nHe wrote a w3mimgdisplay compatible program [yaimg-sixel](https://github.com/uobikiemukot/sdump/tree/master/yaimg-sixel).\r\nIt also works with [ranger](https://github.com/hut/ranger).\r\n\r\n  ![w3m-yaimg-sixel](https://raw.githubusercontent.com/saitoha/libsixel/data/data/w3m-yaimg-sixel.jpg)\r\n\r\n\r\n### GNU Screen integration\r\n\r\n[Arakiken's GNU Screen fork(sixel branch)](https://bitbucket.org/arakiken/screen/branch/sixel)\r\nworks with SIXEL-supported applications including above products.\r\nThis project is now in progress.\r\nGUI flavored SIXEL applications will integrated with existing terminal applications on it.\r\n\r\n  ![w3m-sixel-screen](https://raw.githubusercontent.com/saitoha/libsixel/data/data/w3m-sixel-screen.png)\r\n\r\n  ![sixel-screen](https://raw.githubusercontent.com/saitoha/libsixel/data/data/arakikens-screen.jpg)\r\n\r\n  ![xsixel-screen](https://raw.githubusercontent.com/saitoha/libsixel/data/data/xsixel-on-screen.png)\r\n\r\nSee also on [youtube](http://youtu.be/QQAqe32VkFg).\r\n\r\n### Twitter client integration\r\n\r\nSome NetBSD/OpenBSD users are doing amazing challenges.\r\n\r\n#### [arakiken's mikutterm(mikutterm-sixel)](https://bitbucket.org/arakiken/mikutterm/branch/sixel)\r\n\r\n  Now [mikutter](http://mikutter.hachune.net/) + [mikutterm](https://bitbucket.org/arakiken/mikutterm) works with libsixel inline-image extension.\r\n\r\n  SIXEL works with old powerless machines such as\r\n\r\n  [NetBSD/luna68k](http://wiki.netbsd.org/ports/luna68k/) (here is OMRON LUNA-II):\r\n\r\n  ![mikutterm-netbsd-luna68k](https://raw.githubusercontent.com/saitoha/libsixel/data/data/mikutterm-netbsd-luna68k.jpg)\r\n\r\n  [NetBSD/hp300](http://wiki.netbsd.org/ports/hp300/) (here is HP9000/425e):\r\n\r\n  ![mikutterm-netbsd-hp9000](https://raw.githubusercontent.com/saitoha/libsixel/data/data/mikutterm-netbsd-hp9000.jpg)\r\n\r\n\r\n#### [arakiken's tw(tw-sixel)](https://bitbucket.org/arakiken/tw/branch/sixel)\r\n\r\n  [arakiken's tw(tw-sixel)](https://bitbucket.org/arakiken/tw/branch/sixel) works with libsixel inline-image extension.\r\n\r\n  SIXEL works with old powerless machines such as [OpenBSD/luna88k](http://www.openbsd.org/luna88k.html) (here is OMRON LUNA-88K2 MC88100@33MHz):\r\n\r\n  ![mikutterm-netbsd-hp9000](https://raw.githubusercontent.com/saitoha/libsixel/data/data/tw-openbsd-luna88k.jpg)\r\n\r\n\r\n#### [sayaka-chan](https://github.com/isaki68k/sayaka/)\r\n\r\n  [sayaka-chan](https://github.com/isaki68k/sayaka/) works with libsixel inline-image extension.\r\n\r\n  SIXEL works with old powerless machines such as [NetBSD/x68k](http://wiki.netbsd.org/ports/x68k/) (here is SHARP X68030 with 060turbo):\r\n\r\n  ![sayaka-chan](https://raw.githubusercontent.com/saitoha/libsixel/data/data/sayaka-netbsd-x68k.jpg)\r\n\r\n  SIXEL works even in-kernel console. [@isaki68k](https://github.com/isaki68k) wrote\r\n  [a patch for ite(4)](https://github.com/isaki68k/misc/blob/master/NetBSD/patch/x68k-ite-sixel.diff).\r\n\r\n  ![ite(4)](https://raw.githubusercontent.com/saitoha/libsixel/data/data/ite.png)\r\n\r\n\r\n## Highlighted features\r\n\r\n### Improved compression\r\n\r\nFormer sixel encoders(such as [ppmtosixel](http://netpbm.sourceforge.net/doc/ppmtosixel.html)) are mainly designed for dot-matrix printers.\r\nThey minimize the amount of printer-head movement distance.\r\nBut nowadays this method did not represent the best performance for displaying sixel data on terminal emulators.\r\nSIXEL data for terminals were found in 80's Usenet, but the technology of how to create them seems to be lost.\r\n[kmiya's sixel](http://nanno.dip.jp/softlib/man/rlogin/sixel.tar.gz) introduces the encoding method which is re-designed\r\nfor terminal emulators to optimize the overhead of transporting SIXEL with keeping compatibility with former SIXEL terminal.\r\nNow libsixel and ImageMagick's sixel coder follow it.\r\n\r\n\r\n### High quality quantization\r\n\r\nimg2sixel(1) supports color image quantization. It works well even if few number of colors are allowed.\r\n\r\n- ppmtosixel (netpbm)\r\n\r\n    $ jpegtopnm images/snake.jpg | pnmquant 16 | ppmtosixel\r\n\r\n  ![ppmtosixel](https://raw.githubusercontent.com/saitoha/libsixel/data/data/q_ppmtosixel.png)\r\n\r\n\r\n- ppmtosixel with Floyd–Steinberg dithering (netpbm)\r\n\r\n    $ jpegtopnm images/snake.jpg | pnmquant 16 -floyd | ppmtosixel\r\n\r\n  ![ppmtosixel](https://raw.githubusercontent.com/saitoha/libsixel/data/data/q_ppmtosixel2.png)\r\n\r\n\r\n- kmiya's sixel\r\n\r\n    $ sixel -p16 images/snake.jpg\r\n\r\n  ![kmiya's sixel](https://raw.githubusercontent.com/saitoha/libsixel/data/data/q_sixel.png)\r\n\r\n\r\n- PySixel (sixelconv command)\r\n\r\n    $ sixelconv -n16 images/snake.jpg\r\n\r\n  ![PySixel](https://raw.githubusercontent.com/saitoha/libsixel/data/data/q_sixelconv.png)\r\n\r\n\r\n- libsixel (img2sixel command)\r\n\r\n    $ img2sixel -p16 images/snake.jpg\r\n\r\n  ![PySixel](https://raw.githubusercontent.com/saitoha/libsixel/data/data/q_libsixel.png)\r\n\r\n\r\n## Terminal requirements\r\n\r\nIf you want to view a SIXEL image, you have to get a terminal which support sixel graphics.\r\n\r\nNow SIXEL feature is supported by the following terminals.\r\n\r\n- DEC VT series, VT240/VT241/VT330/VT340/VT282/VT284/VT286/VT382\r\n\r\n- DECterm(dxterm)\r\n\r\n- Kermit\r\n\r\n- ZSTEM 340\r\n\r\n- WRQ Reflection\r\n\r\n- RLogin (Japanese terminal emulator)\r\n\r\n  [http://nanno.dip.jp/softlib/man/rlogin/](http://nanno.dip.jp/softlib/man/rlogin/)\r\n\r\n- tanasinn (Works with firefox)\r\n\r\n  [http://zuse.jp/tanasinn/](http://zuse.jp/tanasinn/)\r\n\r\n- mlterm\r\n\r\n  [http://mlterm.sourceforge.net/](http://mlterm.sourceforge.net/)\r\n\r\n  Works on each of X, win32/cygwin, framebuffer version.\r\n\r\n- XTerm (compiled with --enable-sixel option)\r\n\r\n  [http://invisible-island.net/xterm/](http://invisible-island.net/xterm/)\r\n\r\n  You should launch xterm with \"-ti 340\" option. The SIXEL palette is limited to a maximum of 16 colors.\r\n\r\n- yaft\r\n\r\n  [https://github.com/uobikiemukot/yaft](https://github.com/uobikiemukot/yaft)\r\n\r\n- recterm (ttyrec to GIF converter)\r\n\r\n  [https://github.com/uobikiemukot/recterm](https://github.com/uobikiemukot/recterm)\r\n\r\n- seq2gif (ttyrec to GIF converter)\r\n\r\n  [https://github.com/saitoha/seq2gif](https://github.com/saitoha/seq2gif)\r\n\r\n\r\n## Packages\r\n\r\n- [FreeBSD ports](http://portsmon.freebsd.org/portoverview.py?category=graphics&portname=libsixel)\r\n- [DPorts](https://github.com/DragonFlyBSD/DPorts/tree/master/graphics/libsixel)\r\n- [pkgsrc](http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/graphics/libsixel/)\r\n- [Homebrew tap](https://github.com/aki017/homebrew-sixel)\r\n- [yacp](https://github.com/fd00/yacp/tree/master/libsixel)\r\n- [Debian](https://packages.debian.org/search?searchon=names&keywords=libsixel)\r\n- [AUR](https://aur.archlinux.org/packages/libsixel/)\r\n\r\n\r\n## Build and install\r\n\r\n### Linux, OSX, cygwin\r\n\r\n```\r\n$ ./configure\r\n$ make\r\n# make install\r\n```\r\n\r\n### Cross compile with MinGW\r\n\r\n```\r\n$ CC=i686-w64-mingw32-gcc cross_compile=yes ./configure --host=i686-w64-mingw32\r\n$ make\r\n```\r\n\r\n## Configure options\r\n\r\n### Build with optional packages\r\n\r\n```\r\n--with-libcurl            build with libcurl (default: auto)\r\n--with-gd                 build with libgd (default: no)\r\n--with-gdk-pixbuf2        build with gdk-pixbuf2 (default: no)\r\n--with-jpeg               build with libjpeg (default: auto)\r\n--with-png                build with libpng (default: auto)\r\n--with-pkgconfigdir       specify pkgconfig dir (default is libdir/pkgconfig)\r\n--with-bashcompletiondir  specify bashcompletion.d\r\n--with-zshcompletiondir   specify zshcompletion.d\r\n```\r\n\r\n## Usage of command line tools\r\n\r\n### img2sixel\r\n\r\n```\r\nUsage: img2sixel [Options] imagefiles\r\n       img2sixel [Options] < imagefile\r\n\r\nOptions:\r\n-7, --7bit-mode            generate a sixel image for 7bit\r\n                           terminals or printers (default)\r\n-8, --8bit-mode            generate a sixel image for 8bit\r\n                           terminals or printers\r\n-p COLORS, --colors=COLORS specify number of colors to reduce\r\n                           the image to (default=256)\r\n-m FILE, --mapfile=FILE    transform image colors to match this\r\n                           set of colorsspecify map\r\n-e, --monochrome           output monochrome sixel image\r\n                           this option assumes the terminal\r\n                           background color is black\r\n-i, --invert               assume the terminal background color\r\n                           is white, make sense only when -e\r\n                           option is given\r\n-u, --use-macro            use DECDMAC and DEVINVM sequences to\r\n                           optimize GIF animation rendering\r\n-n, --macro-number         specify an number argument for\r\n                           DECDMAC and make terminal memorize\r\n                           SIXEL image. No image is shown if this\r\n                           option is specified\r\n-C COMPLEXIONSCORE, --complexion-score=COMPLEXIONSCORE\r\n                           specify an number argument for the\r\n                           score of complexion correction.\r\n                           COMPLEXIONSCORE must be 1 or more.\r\n-g, --ignore-delay         render GIF animation without delay\r\n-S, --static               render animated GIF as a static image\r\n-d DIFFUSIONTYPE, --diffusion=DIFFUSIONTYPE\r\n                           choose diffusion method which used\r\n                           with -p option (color reduction)\r\n                           DIFFUSIONTYPE is one of them:\r\n                             auto     -> choose diffusion type\r\n                                         automatically (default)\r\n                             none     -> do not diffuse\r\n                             fs       -> Floyd-Steinberg method\r\n                             atkinson -> Bill Atkinson's method\r\n                             jajuni   -> Jarvis, Judice & Ninke\r\n                             stucki   -> Stucki's method\r\n                             burkes   -> Burkes' method\r\n-f FINDTYPE, --find-largest=FINDTYPE\r\n                           choose method for finding the largest\r\n                           dimension of median cut boxes for\r\n                           splitting, make sense only when -p\r\n                           option (color reduction) is\r\n                           specified\r\n                           FINDTYPE is one of them:\r\n                             auto -> choose finding method\r\n                                     automatically (default)\r\n                             norm -> simply comparing the\r\n                                     range in RGB space\r\n                             lum  -> transforming into\r\n                                     luminosities before the\r\n                                     comparison\r\n-s SELECTTYPE, --select-color=SELECTTYPE\r\n                           choose the method for selecting\r\n                           representative color from each\r\n                           median-cut box, make sense only\r\n                           when -p option (color reduction) is\r\n                           specified\r\n                           SELECTTYPE is one of them:\r\n                             auto      -> choose selecting\r\n                                          method automatically\r\n                                          (default)\r\n                             center    -> choose the center of\r\n                                          the box\r\n                             average    -> calculate the color\r\n                                          average into the box\r\n                             histogram -> similar with average\r\n                                          but considers color\r\n                                          histogram\r\n-c REGION, --crop=REGION   crop source image to fit the\r\n                           specified geometry. REGION should\r\n                           be formatted as '%dx%d+%d+%d'\r\n-w WIDTH, --width=WIDTH    resize image to specified width\r\n                           WIDTH is represented by the\r\n                           following syntax\r\n                             auto       -> preserving aspect\r\n                                           ratio (default)\r\n                             <number>%  -> scale width with\r\n                                           given percentage\r\n                             <number>   -> scale width with\r\n                                           pixel counts\r\n                             <number>px -> scale width with\r\n                                           pixel counts\r\n-h HEIGHT, --height=HEIGHT resize image to specified height\r\n                           HEIGHT is represented by the\r\n                           following syntax\r\n                             auto       -> preserving aspect\r\n                                           ratio (default)\r\n                             <number>%  -> scale height with\r\n                                           given percentage\r\n                             <number>   -> scale height with\r\n                                           pixel counts\r\n                             <number>px -> scale height with\r\n                                           pixel counts\r\n-r RESAMPLINGTYPE, --resampling=RESAMPLINGTYPE\r\n                           choose resampling filter used\r\n                           with -w or -h option (scaling)\r\n                           RESAMPLINGTYPE is one of them:\r\n                             nearest  -> Nearest-Neighbor\r\n                                         method\r\n                             gaussian -> Gaussian filter\r\n                             hanning  -> Hanning filter\r\n                             hamming  -> Hamming filter\r\n                             bilinear -> Bilinear filter\r\n                                         (default)\r\n                             welsh    -> Welsh filter\r\n                             bicubic  -> Bicubic filter\r\n                             lanczos2 -> Lanczos-2 filter\r\n                             lanczos3 -> Lanczos-3 filter\r\n                             lanczos4 -> Lanczos-4 filter\r\n-q QUALITYMODE, --quality=QUALITYMODE\r\n                           select quality of color\r\n                           quanlization.\r\n                             auto -> decide quality mode\r\n                                     automatically (default)\r\n                             high -> high quality and low\r\n                                     speed mode\r\n                             low  -> low quality and high\r\n                                     speed mode\r\n-l LOOPMODE, --loop-control=LOOPMODE\r\n                           select loop control mode for GIF\r\n                           animation.\r\n                             auto    -> honor the setting of\r\n                                        GIF header (default)\r\n                             force   -> always enable loop\r\n                             disable -> always disable loop\r\n-t PALETTETYPE, --palette-type=PALETTETYPE\r\n                           select palette color space type\r\n                             auto -> choose palette type\r\n                                     automatically (default)\r\n                             hls  -> use HLS color space\r\n                             rgb  -> use RGB color space\r\n-P --penetrate             penetrate GNU Screen using DCS\r\n                           pass-through sequence\r\n-v, --verbose              show debugging info\r\n-V, --version              show version and license info\r\n-H, --help                 show this help\r\n```\r\n\r\nConvert a jpeg image file into a sixel file\r\n\r\n```\r\n$ img2sixel < images/egret.jpg > egret.sixel\r\n```\r\n\r\nReduce colors to 16:\r\n\r\n```\r\n$ img2sixel -p 16 < images/egret.jpg > egret.sixel\r\n```\r\n\r\nReduce colors with fixed palette:\r\n\r\n```\r\n$ img2sixel -m images/map16.png < images/egret.jpg > egret.sixel\r\n```\r\n\r\n### sixel2png\r\n\r\n```\r\nUsage: sixel2png -i input.sixel -o output.png\r\n       sixel2png < input.sixel > output.png\r\n\r\nOptions:\r\n-i, --input     specify input file\r\n-o, --output    specify output file\r\n-V, --version   show version and license information\r\n-H, --help      show this help\r\n```\r\n\r\nConvert a sixel file into a png image file\r\n\r\n```\r\n$ sixel2png < egret.sixel > egret.png\r\n```\r\n\r\n## Usage of conversion API 1.0\r\n\r\nThe Whole API is described [here](https://github.com/saitoha/libsixel/blob/master/include/sixel.h.in).\r\n\r\n### Example\r\n\r\nIf you use OSX, a tiny example is available\r\n[here](https://github.com/saitoha/libsixel/blob/master/examples/osx/opengl/).\r\n\r\n  ![opengl example](https://raw.githubusercontent.com/saitoha/libsixel/data/data/example_opengl.gif)\r\n\r\n### Bitmap to SIXEL\r\n\r\n*sixel_encode* function converts bitmap array into SIXEL format.\r\n\r\n```C\r\n/* converter API */\r\n\r\n/* convert pixels into sixel format and write it to output context */\r\nint\r\nsixel_encode(unsigned char  /* in */ *pixels,   /* pixel bytes */\r\n             int            /* in */  width,    /* image width */\r\n             int            /* in */  height,   /* image height */\r\n             int            /* in */  depth,    /* pixel depth: now only 3 is supported */\r\n             sixel_dither_t /* in */ *dither,   /* dither context */\r\n             sixel_output_t /* in */ *context); /* output context */\r\n```\r\nTo use this function, you have to initialize two objects,\r\n\r\n- *sixel_dither_t* (dithering context object)\r\n- *sixel_output_t* (output context object)\r\n\r\n#### Dithering context\r\n\r\nHere is a part of APIs for dithering context manipulation.\r\n\r\n```C\r\n/* create dither context object: reference counter is set to 1 */\r\nsixel_dither_t *\r\nsixel_dither_create(int /* in */ ncolors); /* number of colors */\r\n\r\n/* increment reference count of dither context object (thread-unsafe) */\r\nvoid\r\nsixel_dither_ref(sixel_dither_t *dither); /* dither context object */\r\n\r\n/* decrement reference count of dither context object (thread-unsafe) */\r\nvoid\r\nsixel_dither_unref(sixel_dither_t *dither); /* dither context object */\r\n\r\n/* initialize internal palette from specified pixel buffer */\r\nint\r\nsixel_dither_initialize(\r\n    sixel_dither_t *dither,          /* dither context object */\r\n    unsigned char /* in */ *data,    /* sample image */\r\n    int /* in */ width,              /* image width */\r\n    int /* in */ height,             /* image height */\r\n    int /* in */ depth,              /* pixel depth, now only '3' is supported */\r\n    int /* in */ method_for_largest, /* set 0 or method for finding the largest dimension */\r\n    int /* in */ method_for_rep,     /* set 0 or method for choosing a color from the box */\r\n    int /* in */ quality_mode        /* set 0 or quality of histogram processing */\r\n);\r\n```\r\n\r\n#### Output context\r\n\r\nHere is a part of APIs for output context manipulation.\r\n\r\n```C\r\ntypedef int (* sixel_write_function)(char *data, int size, void *priv);\r\n\r\n/* create output context object */\r\nsixel_output_t *const\r\nsixel_output_create(\r\n    sixel_write_function /* in */ fn_write, /* callback function for output sixel */\r\n    void /* in */ *priv                     /* private data given as\r\n);                                             3rd argument of fn_write */\r\n\r\n/* increment reference count of output context object (thread-unsafe) */\r\nvoid\r\nsixel_output_ref(sixel_output_t /* in */ *output);     /* output context */\r\n\r\n/* decrement reference count of output context object (thread-unsafe) */\r\nvoid\r\nsixel_output_unref(sixel_output_t /* in */ *output);   /* output context */\r\n\r\n```\r\n\r\n### SIXEL to indexed bitmap\r\n\r\n*sixel_decode* function converts SIXEL into indexed bitmap bytes with its palette.\r\n\r\n```\r\n/* malloc(3) compatible function */\r\ntypedef void * (* sixel_allocator_function)(size_t size);\r\n\r\n/* convert sixel data into indexed pixel bytes and palette data */\r\nint\r\nsixel_decode(unsigned char              /* in */  *sixels,    /* sixel bytes */\r\n             int                        /* in */  size,       /* size of sixel bytes */\r\n             unsigned char              /* out */ **pixels,   /* decoded pixels */\r\n             int                        /* out */ *pwidth,    /* image width */\r\n             int                        /* out */ *pheight,   /* image height */\r\n             unsigned char              /* out */ **palette,  /* RGBA palette */\r\n             int                        /* out */ *ncolors,   /* palette size (<= 256) */\r\n             sixel_allocator_function   /* out */ allocator); /* malloc function */\r\n```\r\n\r\n\r\n## Support\r\n\r\nThis software is provided \"as is\" without express or implied warranty.\r\nThe main support channel for this software is the github issue tracker:\r\n\r\n  [https://github.com/saitoha/libsixel/issues](https://github.com/saitoha/libsixel/issues)\r\n\r\n\r\nPlease post your issue if you have any problems, questions or suggestions.\r\n\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\n> Copyright (c) 2014 Hayaki Saito\r\n>\r\n> Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n> this software and associated documentation files (the \"Software\"), to deal in\r\n> the Software without restriction, including without limitation the rights to\r\n> use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\n> the Software, and to permit persons to whom the Software is furnished to do so,\r\n> subject to the following conditions:\r\n>\r\n> The above copyright notice and this permission notice shall be included in all\r\n> copies or substantial portions of the Software.\r\n>\r\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\n> FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n> COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\n> IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n> CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n## Contributers and Reviewers\r\n\r\n- @arakiken\r\n- @elfring \r\n- @isaki68k\r\n- @knok\r\n- @mattn\r\n- @tsutsui\r\n- @ttdoda\r\n- @uobikiemukot\r\n- @waywardmonkeys\r\n- @yoshikaw\r\n  \r\n## Acknowledgment\r\n\r\nThis software derives from the following implementations.\r\n\r\n### sixel 2014-3-2\r\n\r\nsrc/tosixel.c, src/fromsixel.c, and some part of converters/loader.c are\r\nderived from kmiya's \"*sixel*\" original version (2014-3-2)\r\n\r\n  Package: http://nanno.dip.jp/softlib/man/rlogin/sixel.tar.gz\r\n\r\n  Unofficial repo: https://github.com/saitoha/sixel\r\n\r\nThis work is written by kmiya@ culti. He distributes it under very permissive license.\r\n\r\nThe original license text(in Japanese only) is:\r\n\r\n```\r\nこのプログラム及びソースコードの使用について個人・商用を問わず\r\n\r\nご自由に使用していただいで結構です。\r\n\r\nまた、配布・転載・紹介もご連絡の必要もありません。\r\n\r\nソースの改変による配布も自由ですが、どのバージョンの改変かを\r\n\r\n明記されることを希望します。\r\n\r\nバージョン情報が無い場合は、配布物の年月日を明記されることを\r\n\r\n希望します。\r\n\r\n                  2014/10/05  kmiya\r\n```\r\n\r\nThe unofficial translation:\r\n\r\n```\r\nAnyone is free to use this program for any purpose,\r\ncommercial or non-commercial, without any restriction.\r\n\r\nAnyone is free to distribute, copy, publish, or\r\nadvertise this software, without any contact.\r\n\r\nAnyone is free to distribute with modification of the\r\nsource code, but I \"hope\" that its based version or\r\ndate will be written clearly.\r\n\r\n                                    2014/10/05 kmiya\r\n```\r\n\r\nkmiya also said this is compatible with MIT/BSD/GPL.\r\n\r\n### stbi-1.41\r\n\r\nThis software includes *stbi-1.41* (stb_image.h),\r\npublic domain JPEG/PNG reader.\r\n\r\nhttps://github.com/nothings/stb\r\n\r\n\r\n### stbiw-0.92\r\n\r\nThis software includes *stbiw-0.94* (stb_image_write.h),\r\npublic domain PNG/BMP/TGA writer.\r\n\r\nhttps://github.com/nothings/stb\r\n\r\n\r\n### pnmquant.c (netpbm library)\r\n\r\nThe implementation of median cut algorithm for color quantization in quant.c\r\nis imported from *pnmcolormap* included in *netpbm library*.\r\n\r\nhttp://netpbm.sourceforge.net/\r\n\r\n*pnmcolormap* was derived from *ppmquant*, originally written by Jef Poskanzer.\r\n\r\n> Copyright (C) 1989, 1991 by Jef Poskanzer.\r\n> Copyright (C) 2001 by Bryan Henderson.\r\n>\r\n> Permission to use, copy, modify, and distribute this software and its\r\n> documentation for any purpose and without fee is hereby granted, provided\r\n> that the above copyright notice appear in all copies and that both that\r\n> copyright notice and this permission notice appear in supporting\r\n> documentation.  This software is provided \"as is\" without express or\r\n> implied warranty.\r\n\r\n\r\n### loader.h (@uobikiemukot's sdump)\r\n\r\nSome parts of converters/loader.c are imported from @uobikiemukot's\r\n[sdump](https://github.com/uobikiemukot/sdump) project\r\n\r\n> The MIT License (MIT)\r\n>\r\n> Copyright (c) 2014 haru <uobikiemukot at gmail dot com>\r\n>\r\n> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n>\r\n> The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\r\n### ax_gcc_var_attribute / ax_gcc_func_attribute\r\n\r\nThese are useful m4 macros for detecting some GCC attributes.\r\n\r\nhttp://www.gnu.org/software/autoconf-archive/ax_gcc_var_attribute.html\r\nhttp://www.gnu.org/software/autoconf-archive/ax_gcc_func_attribute.html\r\n\r\n> Copyright (c) 2013 Gabriele Svelto <gabriele.svelto@gmail.com>\r\n>\r\n> Copying and distribution of this file, with or without modification, are\r\n> permitted in any medium without royalty provided the copyright notice\r\n> and this notice are preserved.  This file is offered as-is, without any\r\n> warranty.\r\n\r\n\r\n### graphics.c (from Xterm pl#310)\r\n\r\nThe helper function *hls2rgb* in *src/fromsixel.c* is imported from\r\n*graphics.c* in [Xterm pl#310](http://invisible-island.net/xterm/),\r\noriginally written by Ross Combs.\r\n\r\n> Copyright 2013,2014 by Ross Combs\r\n>\r\n>                         All Rights Reserved\r\n>\r\n> Permission is hereby granted, free of charge, to any person obtaining a\r\n> copy of this software and associated documentation files (the\r\n> \"Software\"), to deal in the Software without restriction, including\r\n> without limitation the rights to use, copy, modify, merge, publish,\r\n> distribute, sublicense, and/or sell copies of the Software, and to\r\n> permit persons to whom the Software is furnished to do so, subject to\r\n> the following conditions:\r\n>\r\n> The above copyright notice and this permission notice shall be included\r\n> in all copies or substantial portions of the Software.\r\n>\r\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n> OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n> MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n> IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY\r\n> CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n> TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n> SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n>\r\n> Except as contained in this notice, the name(s) of the above copyright\r\n> holders shall not be used in advertising or otherwise to promote the\r\n> sale, use or other dealings in this Software without prior written\r\n> authorization.\r\n\r\n\r\n### test images\r\n\r\n#### http://public-domain-photos.com/\r\n\r\nThe following test images in \"image/\" directory came from PUBLIC-DOMAIN-PHOTOS.com.\r\n\r\n- images/egret.jpg\r\n\r\n    author: Jon Sullivan\r\n    url: http://public-domain-photos.com/animals/egret-4.htm\r\n\r\n- images/snake.jpg\r\n\r\n    author: Jon Sullivan\r\n    url: http://public-domain-photos.com/animals/snake-4.htm\r\n\r\nThese are in the [public domain](http://creativecommons.org/licenses/publicdomain/).\r\n\r\n\r\n#### vimperator3.png (mascot of vimperator)\r\n\r\nimages/vimperator3.png is in the public domain.\r\n\r\n    author: @k_wizard\r\n    url: http://quadrantem.com/~k_wizard/vimprtan/\r\n\r\n\r\n## References\r\n\r\n### ImageMagick\r\n\r\nWe are greatly inspired by the quality of ImageMagick and added some resampling filters to\r\nimg2sixel in reference to the line-up of filters of MagickCore's resize.c.\r\n\r\n    http://www.imagemagick.org/api/MagickCore/resize_8c_source.html\r\n\r\n\r\n## Similar software\r\n\r\n- [netpbm](http://netpbm.sourceforge.net/)\r\n\r\n  You can get SIXEL graphics using [ppmtosixel](http://netpbm.sourceforge.net/doc/ppmtosixel.html)\r\n  or [pbmtoln03](http://netpbm.sourceforge.net/doc/ppmtosixel.html).\r\n\r\n\r\n- [kmiya's sixel](http://nanno.dip.jp/softlib/man/rlogin/sixel.tar.gz)\r\n\r\n  libgd based SIXEL converter\r\n\r\n\r\n- [PySixel](https://pypi.python.org/pypi/PySixel)\r\n\r\n  Python implementation of SIXEL converter\r\n\r\n\r\n- [ImageMagick](http://www.imagemagick.org/)\r\n\r\n  Now SIXEL coder is available in svn trunk and V6 branch.\r\n\r\n\r\n- [monosixel in arakiken's tw](https://bitbucket.org/arakiken/tw/branch/sixel)\r\n\r\n  A monochrome SIXEL converter\r\n\r\n\r\n- [xpr(x11-apps)](ftp://ftp.x.org/pub/unsupported/programs/xpr/)\r\n\r\n  xpr(1) can convert a xwd(X window dump) format image into a sixel\r\n  image with '-device ln03' or '-device la100' option.\r\n  But now it is not maintained. It looks broken.\r\n\r\n\r\n## Other software supporting SIXEL\r\n\r\n- [GNUPLOT](http://www.gnuplot.info/)\r\n\r\n  Recent version of GNUPLOT supports new terminal driver \"sixel\".\r\n\r\n  ![GNUPLOT](https://raw.githubusercontent.com/saitoha/libsixel/data/data/gnuplot.png)\r\n\r\n\r\n- [ghostscript](http://www.ghostscript.com/)\r\n\r\n  You can emit SIXEL images with LN03 / LN50 / LA75 driver.\r\n\r\n  example:\r\n\r\n  ```\r\n    $ gs -q -r100x -dBATCH -dNOPAUSE -sDEVICE=ln03 -sOutputFile=- tiger.eps\r\n  ```\r\n\r\n  ![GhostScript](https://raw.githubusercontent.com/saitoha/libsixel/data/data/gs.png)\r\n\r\n\r\n- [ImageMagick](http://www.imagemagick.org/)\r\n\r\n  Recent version of ImageMagick provides SIXEL coder. It's also available over commandline tools.\r\n\r\n  ![ImageMagick](https://raw.githubusercontent.com/saitoha/libsixel/data/data/imagemagick.png)\r\n\r\n\r\n- [ZX81 Emulator](http://rullf2.xs4all.nl/sg/zx81ce.html)\r\n\r\n  A ZX81 emulator producing Sixel Image Files\r\n\r\n  ![ZX81](https://raw.githubusercontent.com/saitoha/libsixel/data/data/zx81.png)\r\n\r\n\r\n- [qrc](https://github.com/fumiyas/qrc)\r\n\r\n  QR code generator for terminals (ASCII Art, Sixel)\r\n\r\n  ![qrc](https://github.com/fumiyas/qrc/blob/master/qrc-demo.png)\r\n\r\n\r\n- [go-sixel](https://github.com/mattn/go-sixel)\r\n\r\n  SIXEL encoder/decoder and command line tools writtern in golang.\r\n\r\n  ![go-sixel](https://raw.githubusercontent.com/saitoha/libsixel/data/data/go-sixel.png)\r\n\r\n\r\n- [hiptext](https://github.com/jart/hiptext)\r\n\r\n  SIXEL format is supported by -sixel2, -sixel16 or -sixel256 option.\r\n\r\n  ![hiptext](https://camo.githubusercontent.com/fc973ffb20a7ff85969df03fd579da2845e62e68/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313136323733392f323233393832362f39303361653765382d396335622d313165332d383462362d3539626261346661336430342e706e67)\r\n\r\n\r\n- [sixelslide](https://github.com/syuu1228/sixelslide)\r\n\r\n  Freestanding slideviewer using sixel graphics.\r\n  Currently runs on QEMU(i386), without any filesystem or network.\r\n\r\n  ![Animation](https://raw.githubusercontent.com/saitoha/libsixel/data/data/sixelslide.png)\r\n\r\n  cf. http://www.slideshare.net/syuu1228/presentation-on-your-terminal\r\n\r\n\r\n- [GraphicConverter](https://itunes.apple.com/jp/app/graphicconverter-9/id736099092?mt=12)\r\n\r\n  It can import SIXEL images.\r\n\r\n  ![GraphicConverter](https://raw.githubusercontent.com/saitoha/libsixel/data/data/graphicconverter.png)\r\n\r\n\r\n- [SIXEL image viewer](http://rullf2.xs4all.nl/sg/sg.html)\r\n\r\n  This web page can decode SIXEL images (written in javascript).\r\n\r\n  ![SIXEL image viewer ](https://raw.githubusercontent.com/saitoha/libsixel/data/data/js-sixel.png)\r\n\r\n\r\n- [SixelGraphics.jl(written in Julia)](https://github.com/olofsen/SixelGraphics.jl)\r\n\r\n  A module for Julia implementing simple Sixel graphics.\r\n\r\n  ![SixelGraphics.jl](https://raw.githubusercontent.com/saitoha/libsixel/data/data/julia.png)\r\n\r\n\r\n- ![PGPLOT](http://www.astro.caltech.edu/~tjp/pgplot/)\r\n\r\n\r\n- [SIXEL to PostScript converter](http://t.co/zTC7LhRbBc)\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}